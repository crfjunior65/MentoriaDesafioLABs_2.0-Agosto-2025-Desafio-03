# ECS Cluster
resource "aws_ecs_cluster" "app_cluster" {
  name = "bia-app-cluster"

  setting {
    name  = "containerInsights"
    value = "enabled"
  }

  tags = {
    Name = "bia-app-cluster"
  }
}

# Launch Template para EC2 instances
resource "aws_launch_template" "ecs_lt" {
  name_prefix   = "bia-ecs-"
  image_id      = data.aws_ami.ecs_optimized.id
  instance_type = var.instance_type

  vpc_security_group_ids = [aws_security_group.ecs_instances_sg.id]

  iam_instance_profile {
    name = aws_iam_instance_profile.ecs_instance_profile.name
  }

  user_data = base64encode(<<-EOF
    #!/bin/bash
    echo ECS_CLUSTER=${aws_ecs_cluster.app_cluster.name} >> /etc/ecs/ecs.config
    echo ECS_ENABLE_TASK_IAM_ROLE=true >> /etc/ecs/ecs.config
    echo ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true >> /etc/ecs/ecs.config
  EOF
  )

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "bia-ecs-instance"
    }
  }
}

# Auto Scaling Group
resource "aws_autoscaling_group" "ecs_asg" {
  name                = "bia-ecs-asg"
  vpc_zone_identifier = var.private_subnet_ids
  target_group_arns   = [aws_lb_target_group.app_tg.arn]
  health_check_type   = "ELB"
  health_check_grace_period = 300

  min_size         = 1
  max_size         = 3
  desired_capacity = 2

  launch_template {
    id      = aws_launch_template.ecs_lt.id
    version = "$Latest"
  }

  tag {
    key                 = "AmazonECSManaged"
    value               = true
    propagate_at_launch = true
  }

  tag {
    key                 = "Name"
    value               = "bia-ecs-instance"
    propagate_at_launch = true
  }
}

# Capacity Provider
resource "aws_ecs_capacity_provider" "app_capacity_provider" {
  name = "bia-capacity-provider"

  auto_scaling_group_provider {
    auto_scaling_group_arn         = aws_autoscaling_group.ecs_asg.arn
    managed_termination_protection = "ENABLED"

    managed_scaling {
      maximum_scaling_step_size = 1000
      minimum_scaling_step_size = 1
      status                    = "ENABLED"
      target_capacity           = 10
    }
  }
}

resource "aws_ecs_cluster_capacity_providers" "app_capacity_providers" {
  cluster_name = aws_ecs_cluster.app_cluster.name

  capacity_providers = [aws_ecs_capacity_provider.app_capacity_provider.name]

  default_capacity_provider_strategy {
    base              = 1
    weight            = 100
    capacity_provider = aws_ecs_capacity_provider.app_capacity_provider.name
  }
}

# Task Definition para EC2
resource "aws_ecs_task_definition" "app_task" {
  family                = "bia-app"
  network_mode          = "bridge"  # Para EC2, usar bridge mode
  requires_compatibilities = ["EC2"]
  execution_role_arn    = aws_iam_role.ecs_task_execution_role.arn
  task_role_arn        = aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([
    {
      name  = "bia-app"
      image = var.app_image

      portMappings = [
        {
          containerPort = var.container_port
          hostPort      = 0  # Dynamic port mapping para EC2
          protocol      = "tcp"
        }
      ]

      environment = [
        {
          name  = "NODE_ENV"
          value = "production"
        },
        {
          name  = "API_URL"
          value = "https://${var.domain_name}/api"
        },
        {
          name  = "FRONTEND_URL"
          value = "https://${var.domain_name}"
        },
        {
          name  = "DB_HOST"
          value = aws_rds_cluster.app_db.endpoint
        },
        {
          name  = "DB_PORT"
          value = "3306"
        },
        {
          name  = "DB_NAME"
          value = var.db_name
        }
      ]

      secrets = [
        {
          name      = "DB_PASSWORD"
          valueFrom = aws_secretsmanager_secret.db_password.arn
        },
        {
          name      = "DB_USERNAME"
          valueFrom = aws_secretsmanager_secret.db_username.arn
        }
      ]

      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = aws_cloudwatch_log_group.app_logs.name
          awslogs-region        = var.aws_region
          awslogs-stream-prefix = "ecs"
        }
      }

      essential = true
      memory    = 512
    }
  ])

  tags = {
    Name = "bia-app-task-definition"
  }
}

# ECS Service para EC2
resource "aws_ecs_service" "app_service" {
  name            = "bia-app-service"
  cluster         = aws_ecs_cluster.app_cluster.id
  task_definition = aws_ecs_task_definition.app_task.arn
  desired_count   = 2
  launch_type     = "EC2"

  load_balancer {
    target_group_arn = aws_lb_target_group.app_tg.arn
    container_name   = "bia-app"
    container_port   = var.container_port
  }

  deployment_configuration {
    maximum_percent         = 200
    minimum_healthy_percent = 100
  }

  depends_on = [
    aws_lb_listener.app_https,
    aws_autoscaling_group.ecs_asg
  ]

  tags = {
    Name = "bia-app-service"
  }
}

# Security Group para instâncias EC2
resource "aws_security_group" "ecs_instances_sg" {
  name_prefix = "bia-ecs-instances-sg"
  vpc_id      = var.vpc_id

  ingress {
    description     = "Dynamic ports from ALB"
    from_port       = 32768
    to_port         = 65535
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id]
  }

  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr]  # Apenas da VPC
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "bia-ecs-instances-security-group"
  }
}

# Target Group para EC2 (porta dinâmica)
resource "aws_lb_target_group" "app_tg" {
  name     = "bia-app-tg"
  port     = 80  # Não é usado com dynamic port mapping
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    enabled             = true
    healthy_threshold   = 2
    interval            = 30
    matcher             = "200"
    path                = "/health"  # Certifique-se que existe na app
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    unhealthy_threshold = 2
  }

  # Importante para EC2 dynamic port mapping
  deregistration_delay = 30

  tags = {
    Name = "bia-app-target-group"
  }
}

# AMI ECS Optimized
data "aws_ami" "ecs_optimized" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-ecs-hvm-*-x86_64-ebs"]
  }
}

# IAM Role para instâncias EC2
resource "aws_iam_role" "ecs_instance_role" {
  name = "bia-ecs-instance-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_instance_role_policy" {
  role       = aws_iam_role.ecs_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
}

resource "aws_iam_instance_profile" "ecs_instance_profile" {
  name = "bia-ecs-instance-profile"
  role = aws_iam_role.ecs_instance_role.name
}

# IAM Role para Task Execution
resource "aws_iam_role" "ecs_task_execution_role" {
  name = "bia-ecs-task-execution-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_task_execution_role_policy" {
  role       = aws_iam_role.ecs_task_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Política adicional para Secrets Manager
resource "aws_iam_role_policy" "ecs_secrets_policy" {
  name = "bia-ecs-secrets-policy"
  role = aws_iam_role.ecs_task_execution_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue"
        ]
        Resource = [
          aws_secretsmanager_secret.db_password.arn,
          aws_secretsmanager_secret.db_username.arn
        ]
      }
    ]
  })
}

# IAM Role para as Tasks
resource "aws_iam_role" "ecs_task_role" {
  name = "bia-ecs-task-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

# Variáveis adicionais
variable "instance_type" {
  description = "Tipo de instância EC2"
  type        = string
  default     = "t3.small"
}

variable "vpc_cidr" {
  description = "CIDR da VPC"
  type        = string
}

variable "private_subnet_ids" {
  description = "IDs das subnets privadas para EC2"
  type        = list(string)
}

variable "app_image" {
  description = "URI da imagem Docker"
  type        = string
}

variable "aws_region" {
  description = "Região AWS"
  type        = string
}

variable "db_name" {
  description = "Nome do banco de dados"
  type        = string
  default     = "bia_db"
}
